{"version":3,"file":"onboard.min.js","sources":["../src/Onboard.js","../src/utils/Observable.js","../src/MaskRenderer.js","../src/WindowRenderer.js","../src/OnboardRenderer.js","../src/OnboardDefaults.js"],"sourcesContent":["import Observable from \"./utils/Observable\";\nimport * as Defaults from \"./OnboardDefaults\";\nimport OnboardRenderer from \"./OnboardRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main onboard class\n * @param {Object} options\n */\nclass Onboard {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * fill color\n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * steps\n\t\t */\n\t\tthis._options.steps = options.steps;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * OnboardRenderer\n\t\t */\n\t\tthis._onboardRenderer = new OnboardRenderer(this._options);\n\n\t\tthis.render();\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Onboard} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Onboard} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Onboard} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._onboardRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Onboard} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._onboardRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets data\n\t * @param {Object} options\n\t * @returns {Onboard} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._onboardRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._onboardRenderer.update(options);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Starts onboarding\n\t * @returns {Onboard} returns this widget instance \n\t */\n\tstart() {\n\t\tif (!this._onboardRenderer.isRendered()) {\n\t\t\tthis._onboardRenderer.render();\n\t\t}\n\n\t\tthis._onboardRenderer.start();\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Stops\n\t * @returns {Onboard} returns this widget instance \n\t */\n\tstop() {\n\t\tif (!this._onboardRenderer.isRendered()) {\n\t\t\tthis._onboardRenderer.render();\n\t\t}\n\n\t\tthis._onboardRenderer.stop();\n\n\t\treturn this;\n\t}\t\n}\n\nexport default Onboard;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","import style from \"./Onboard.css\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Onboard class\r\n * @param {Object} options\r\n */\r\nexport default class MaskRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Onboard options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Mask Element\r\n\t\t */\r\n\t\tthis._svgEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Step elements\r\n\t\t */\r\n\t\tthis._stepElements = [];\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Onboard has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Onboard has been rendered or not\r\n\t * @returns {boolean} true if Onboard has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tthis._containerEl = d3.select(selector || document.body);\r\n\r\n\t\tthis._renderMask();\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_getViewSize(){\r\n\t\treturn {\r\n\t\t\twidth: Math.max(document.documentElement.offsetWidth, document.documentElement.clientWidth),\r\n\t\t\theight: Math.max(document.documentElement.offsetHeight, document.documentElement.clientHeight)\r\n\t\t}\r\n\t}\r\n\r\n\t_renderMask(){\r\n\t\tvar size = this._getViewSize();\r\n\t\t// render SVG\r\n\t\tthis._svgEl = this._containerEl.append(\"svg\")\r\n\t\t\t.attr(\"class\", style[\"svg\"])\r\n\t\t\t.attr(\"width\", size.width)\r\n\t\t\t.attr(\"height\", size.height)\r\n\r\n\t\t// defs el\r\n\t\tthis._defsEl = this._svgEl.append(\"defs\");\r\n\t\tthis._maskEl = this._defsEl.append(\"mask\")\r\n\t\t\t.attr(\"class\", style[\"mask\"])\r\n\t\t\t.attr(\"id\", \"onboarding-mask\")\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"y\", 0)\r\n\r\n\t\tthis._maskBg = this._maskEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"bg\"])\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t.attr(\"fill\", \"white\")\r\n\r\n\t\tthis._bgEl = this._svgEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"bg\"])\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"mask\", \"url(#onboarding-mask)\")\r\n\t\t\t.attr(\"fill\", this._options.fillColor)\r\n\t\t\t.attr(\"fill-opacity\", this._options.fillOpacity)\r\n\r\n\t\tthis._onWindowResize = ()=>{\r\n\t\t\tvar size = this._getViewSize();\r\n\t\t\tthis._svgEl.attr(\"width\", size.width);\r\n\t\t\tthis._svgEl.attr(\"height\", size.height);\r\n\t\t}\t\r\n\r\n\t\twindow.addEventListener(\"resize\", this._onWindowResize);\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {MaskRenderer} \r\n\t */\r\n\tstart() {\r\n\t\tthis._svgEl.style(\"display\", \"block\");\r\n\t\tthis._clearSteps();\r\n\t\tthis._renderSteps();\r\n\t\treturn this;\r\n\t}\t\r\n\t_clearSteps(){\r\n\t\tthis._stepElements.forEach(element=>element.remove());\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_renderSteps(){\r\n\t\tvar steps = this._options.steps || [];\r\n\t\tsteps.forEach(this._renderStep.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_renderStep(step){\r\n\t\tlet selection = step.selection; \r\n\t\tselection.nodes().forEach(element=>{\r\n\t\t\tthis._stepElements.push(this._renderStepElement(element, step));\r\n\t\t});\r\n\t}\r\n\r\n\t_renderStepElement(element, step){\r\n\t\tvar shape = step.shape || \"rectangle\";\r\n\t\t\t\r\n\t\tif (shape == \"circle\"){\r\n\t\t\treturn this._renderCircleMask(element, step);\r\n\t\t} else {\r\n\t\t\treturn this._renderRectangleMask(element, step);\r\n\t\t}\r\n\t}\r\n\r\n\t_renderRectangleMask(element, step){\r\n\t\tvar box = element.getBoundingClientRect();\t\t\r\n\r\n\t\tvar stepEl = this._maskEl\r\n\t\t\t.append(\"rect\")\r\n\t\t\t\t.attr(\"fill\", \"black\")\r\n\t\t\t\t.attr(\"x\", box.left)\r\n\t\t\t\t.attr(\"y\", box.top)\r\n\t\t\t\t.attr(\"width\", box.width)\r\n\t\t\t\t.attr(\"stroke-width\", step.shape?step.shape.offset||0:0)\r\n\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t.attr(\"height\", box.height)\r\n\r\n\t\treturn stepEl;\r\n\t}\r\n\r\n\t_renderCircleMask(element, step){\r\n\t\tvar box = element.getBoundingClientRect();\t\t\r\n\t\tvar cx = box.left + box.width / 2;\r\n\t\tvar cy = box.top + box.height / 2;\r\n\r\n\t\tvar stepEl = this._maskEl\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"r\", 0)\r\n\t\t\t.attr(\"fill\", \"black\")\r\n\t\t\t.attr(\"cx\", cx)\r\n\t\t\t.attr(\"cy\", cy)\r\n\r\n\t\tstepEl.transition().duration(250).attr(\"r\", step.shape.radius || box.width /2)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {MaskRenderer} \r\n\t */\r\n\tstop() {\r\n\t\tthis._svgEl.style(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Onboard UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\twindow.removeEventListener(\"resize\", this._onWindowResize);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n}","import style from \"./Onboard.css\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * @param {Object} options\r\n */\r\nexport default class WindowRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Onboard options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Onboard has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Onboard has been rendered or not\r\n\t * @returns {boolean} true if Onboard has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tthis._containerEl = d3.select(selector || document.body);\r\n\r\n\t\tthis._renderWindow();\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_renderWindow(){\r\n\t\tthis._windowEl = this._containerEl.append(\"div\")\r\n\t\t\t.attr(\"class\", style[\"window\"])\r\n\r\n\t\tthis._nextBtnEl = this._windowEl.append(\"div\")\r\n\t\t\t.attr(\"class\", style[\"window-next-btn\"])\r\n\t\t\t.html(\"Next\")\r\n\r\n\t\tthis._prevBtnEl = this._windowEl.append(\"div\")\r\n\t\t\t.attr(\"class\", style[\"window-prev-btn\"])\r\n\t\t\t.html(\"Previous\")\r\n\r\n\t\tthis._titleEl = this._windowEl.append(\"div\")\r\n\t\t\t.attr(\"class\", style[\"window-title\"])\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {WindowRenderer} \r\n\t */\r\n\tstart() {\r\n\t\tthis._windowEl.style(\"display\", \"block\");\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {WindowRenderer} \r\n\t */\r\n\tstop() {\r\n\t\tthis._windowEl.style(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Onboard UI  \r\n\t */\r\n\tdestroy() {\r\n\t\treturn this;\r\n\t}\r\n}","import Observable from \"./utils/Observable\";\r\nimport MaskRenderer from \"./MaskRenderer\";\r\nimport WindowRenderer from \"./WindowRenderer\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Onboard class\r\n * @param {Object} options\r\n */\r\nexport default class OnboardRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Onboard options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Onboard has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t\r\n\t\t]);\t\t\r\n\r\n\t\tthis._maskRenderer = new MaskRenderer(options);\r\n\t\tthis._windowRenderer = new WindowRenderer(options);\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Onboard has been rendered or not\r\n\t * @returns {boolean} true if Onboard has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tthis._containerEl = d3.select(selector || document.body);\r\n\r\n\t\tthis._maskRenderer.render(selector);\r\n\t\tthis._windowRenderer.render(selector);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {OnboardRenderer} \r\n\t */\r\n\tstart() {\r\n\t\tthis._maskRenderer.start();\r\n\t\tthis._windowRenderer.start();\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {OnboardRenderer} \r\n\t */\r\n\tstop() {\r\n\t\tthis._maskRenderer.stop();\r\n\t\tthis._windowRenderer.stop();\r\n\t\treturn this;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Onboard UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n\t}\r\n}","/**\r\n * @public\r\n * Default fill color\r\n */\r\nexport const FILL_COLOR = \"#000000\";\r\n\r\n/**\r\n * @public\r\n * Default fill opacity\r\n */\r\nexport const FILL_OPACITY = 0.25;"],"names":["getOptionValue","optionValue","defaultOptionValue","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","MaskRenderer","options","_options","_containerEl","_svgEl","_stepElements","_rendered","selector","d3","document","body","_renderMask","Math","max","documentElement","offsetWidth","clientWidth","offsetHeight","clientHeight","size","_getViewSize","append","attr","style","width","height","_defsEl","_maskEl","_maskBg","_bgEl","fillColor","fillOpacity","_onWindowResize","_this","addEventListener","_clearSteps","_renderSteps","forEach","element","remove","steps","_renderStep","bind","step","selection","nodes","_this2","_renderStepElement","shape","_renderCircleMask","_renderRectangleMask","box","getBoundingClientRect","left","top","offset","cx","cy","transition","duration","radius","removeEventListener","WindowRenderer","_renderWindow","_windowEl","_nextBtnEl","html","_prevBtnEl","_titleEl","OnboardRenderer","_observable","_maskRenderer","_windowRenderer","render","start","stop","eventName","on","off","destroy","_onboardRenderer","isRendered","update"],"mappings":"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"}