{"version":3,"file":"onboard.min.js","sources":["../src/Onboard.js","../src/utils/Observable.js","../src/OnboardRenderer.js","../src/OnboardDefaults.js"],"sourcesContent":["import Observable from \"./utils/Observable\";\nimport * as Defaults from \"./OnboardDefaults\";\nimport OnboardRenderer from \"./OnboardRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main onboard class\n * @param {Object} options\n */\nclass Onboard {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * fill color\n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * steps\n\t\t */\n\t\tthis._options.steps = options.steps;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * OnboardRenderer\n\t\t */\n\t\tthis._onboardRenderer = new OnboardRenderer(this._options);\n\n\t\tthis.render();\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Onboard} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Onboard} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Onboard} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._onboardRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Onboard} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._onboardRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets data\n\t * @param {Object} options\n\t * @returns {Onboard} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._onboardRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._onboardRenderer.update(options);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Starts onboarding\n\t * @returns {Onboard} returns this widget instance \n\t */\n\tstart() {\n\t\tif (!this._onboardRenderer.isRendered()) {\n\t\t\tthis._onboardRenderer.render();\n\t\t}\n\n\t\tthis._onboardRenderer.start();\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Stops\n\t * @returns {Onboard} returns this widget instance \n\t */\n\tstop() {\n\t\tif (!this._onboardRenderer.isRendered()) {\n\t\t\tthis._onboardRenderer.render();\n\t\t}\n\n\t\tthis._onboardRenderer.stop();\n\n\t\treturn this;\n\t}\t\n}\n\nexport default Onboard;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","import style from \"./Onboard.css\";\r\nimport Observable from \"./utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Onboard class\r\n * @param {Object} options\r\n */\r\nexport default class OnboardRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Onboard options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Mask Element\r\n\t\t */\r\n\t\tthis._svgEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Step elements\r\n\t\t */\r\n\t\tthis._stepElements = [];\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Onboard has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t\r\n\t\t]);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Onboard has been rendered or not\r\n\t * @returns {boolean} true if Onboard has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tthis._containerEl = d3.select(selector || document.documentElement);\r\n\r\n\t\tthis._renderMask();\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_renderMask(){\r\n\t\t// render SVG\r\n\t\tthis._svgEl = this._containerEl.append(\"svg\")\r\n\t\t\t.attr(\"class\", style[\"svg\"])\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\r\n\t\t// defs el\r\n\t\tthis._defsEl = this._svgEl.append(\"defs\");\r\n\t\tthis._maskEl = this._defsEl.append(\"mask\")\r\n\t\t\t.attr(\"class\", style[\"mask\"])\r\n\t\t\t.attr(\"id\", \"onboarding-mask\")\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"y\", 0)\r\n\r\n\t\tthis._maskBg = this._maskEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"bg\"])\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t.attr(\"fill\", \"white\")\r\n\r\n\t\tthis._bgEl = this._svgEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"bg\"])\r\n\t\t\t.attr(\"width\", \"100%\")\r\n\t\t\t.attr(\"height\", \"100%\")\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"mask\", \"url(#onboarding-mask)\")\r\n\t\t\t.attr(\"fill\", this._options.fillColor)\r\n\t\t\t.attr(\"fill-opacity\", this._options.fillOpacity)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {OnboardRenderer} \r\n\t */\r\n\tstart() {\r\n\t\tthis._svgEl.style(\"display\", \"block\");\r\n\t\tthis._clearSteps();\r\n\t\tthis._renderSteps();\r\n\t\treturn this;\r\n\t}\t\r\n\t_clearSteps(){\r\n\t\tthis._stepElements.forEach(element=>element.remove());\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_renderSteps(){\r\n\t\tvar steps = this._options.steps || [];\r\n\t\tsteps.forEach(this._renderStep.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_renderStep(step){\r\n\t\tlet selection = step.selection; \r\n\t\tselection.nodes().forEach(element=>{\r\n\t\t\tthis._stepElements.push(this._renderStepElement(element, step));\r\n\t\t});\r\n\t}\r\n\r\n\t_renderStepElement(element, step){\r\n\t\tvar shape = step.shape || \"rectangle\";\r\n\t\t\t\r\n\t\tif (shape == \"circle\"){\r\n\t\t\treturn this._renderCircleMask(element, step);\r\n\t\t} else {\r\n\t\t\treturn this._renderRectangleMask(element, step);\r\n\t\t}\r\n\t}\r\n\r\n\t_renderRectangleMask(element, step){\r\n\t\tvar box = element.getBoundingClientRect();\t\t\r\n\r\n\t\tvar stepEl = this._maskEl\r\n\t\t\t.append(\"rect\")\r\n\t\t\t\t.attr(\"fill\", \"black\")\r\n\t\t\t\t.attr(\"x\", box.left)\r\n\t\t\t\t.attr(\"y\", box.top)\r\n\t\t\t\t.attr(\"width\", box.width)\r\n\t\t\t\t.attr(\"stroke-width\", step.shape?step.shape.offset||0:0)\r\n\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t.attr(\"height\", box.height)\r\n\r\n\t\treturn stepEl;\r\n\t}\r\n\r\n\t_renderCircleMask(element, step){\r\n\t\tvar box = element.getBoundingClientRect();\t\t\r\n\t\tvar cx = box.left + box.width / 2;\r\n\t\tvar cy = box.top + box.height / 2;\r\n\r\n\t\tvar stepEl = this._maskEl\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"r\", 0)\r\n\t\t\t.attr(\"fill\", \"black\")\r\n\t\t\t.attr(\"cx\", cx)\r\n\t\t\t.attr(\"cy\", cy)\r\n\r\n\t\tstepEl.transition().duration(250).attr(\"r\", step.shape.radius || box.width /2)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {OnboardRenderer} \r\n\t */\r\n\tstop() {\r\n\t\tthis._svgEl.style(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Onboard} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {opts} new options\r\n\t * Updates doughnut with new options\r\n\t */\r\n\tupdate(opts) {\r\n\t\tvar options = opts || {};\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Onboard UI  \r\n\t */\r\n\tdestroy() {\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n\t}\r\n}","/**\r\n * @public\r\n * Default fill color\r\n */\r\nexport const FILL_COLOR = \"#000000\";\r\n\r\n/**\r\n * @public\r\n * Default fill opacity\r\n */\r\nexport const FILL_OPACITY = 0.25;"],"names":["getOptionValue","optionValue","defaultOptionValue","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","OnboardRenderer","options","_options","_containerEl","_svgEl","_stepElements","_rendered","_observable","selector","d3","document","documentElement","_renderMask","append","attr","style","_defsEl","_maskEl","_maskBg","_bgEl","fillColor","fillOpacity","_clearSteps","_renderSteps","forEach","element","remove","steps","_renderStep","bind","step","selection","nodes","_this","_renderStepElement","shape","_renderCircleMask","_renderRectangleMask","box","getBoundingClientRect","left","top","width","offset","height","cx","cy","transition","duration","radius","eventName","on","off","opts","destroy","_onboardRenderer","render","isRendered","update","start","stop"],"mappings":"2MAUA,SAASA,GAAeC,EAAaC,cACP,KAAfD,EAA6BC,EAAqBD,0VCN5CE,6BAILC,4EAEHC,UAAYD,EAAOE,OAAO,SAACC,EAAKC,YAC7BA,MACGD,4CAUZE,EAAOC,QACAD,IAASE,MAAKN,WAAY,KAAM,kBAAoBI,cAC3DJ,UAAUI,GAAOG,KAAKF,GACpBC,iCASDF,EAAOC,QACDD,IAASE,MAAKN,WAAY,KAAM,kBAAoBI,KAC3DC,EAEE,IACFG,GAAWF,KAAKN,UAAUI,GAC1BK,EAAQD,EAASE,QAAQL,IACf,GAAVI,KACME,OAAOF,EAAO,aALnBT,UAAUI,YAQTE,mCASHF,QACEA,IAASE,MAAKN,WAAY,KAAM,kBAAoBI,SACtDI,GAAWF,KAAKN,UAAUI,sBAFhBQ,uDAGT,GAAIC,GAAI,EAAGA,EAAIL,EAASM,OAAQD,MAC3BA,GAAGE,MAAMT,KAAMM,SAElBN,oDAQFN,UAAY,KACVM,wfC7DYU,wBACRC,kBAKNC,SAAWD,OAMXE,aAAe,UAMfC,OAAS,UAMTC,sBAMAC,WAAY,OAMZC,YAAc,GAAIzB,4DAWhBQ,MAAKgB,yCASNE,eAEDL,aAAeM,SAAUD,GAAYE,SAASC,sBAE9CC,mBACAN,WAAY,EAEVhB,gDAKFc,OAASd,KAAKa,aAAaU,OAAO,OACrCC,KAAK,QAASC,EAAA,KACdD,KAAK,QAAS,QACdA,KAAK,SAAU,QAGjBxB,KAAK0B,QAAU1B,KAAKc,OAAOS,OAAO,aAC7BI,QAAU3B,KAAK0B,QAAQH,OAAO,QACjCC,KAAK,QAASC,EAAA,MACdD,KAAK,KAAM,mBACXA,KAAK,QAAS,QACdA,KAAK,SAAU,QACfA,KAAK,IAAK,GACVA,KAAK,IAAK,QAEPI,QAAU5B,KAAK2B,QAAQJ,OAAO,QACjCC,KAAK,QAASC,EAAA,IACdD,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAAS,QACdA,KAAK,SAAU,QACfA,KAAK,OAAQ,cAEVK,MAAQ7B,KAAKc,OAAOS,OAAO,QAC9BC,KAAK,QAASC,EAAA,IACdD,KAAK,QAAS,QACdA,KAAK,SAAU,QACfA,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,OAAQ,yBACbA,KAAK,OAAQxB,KAAKY,SAASkB,WAC3BN,KAAK,eAAgBxB,KAAKY,SAASmB,yDAShCjB,OAAOW,MAAM,UAAW,cACxBO,mBACAC,eACEjC,gDAGFe,cAAcmB,QAAQ,kBAASC,GAAQC,mDAOhCpC,KAAKY,SAASyB,WACpBH,QAAQlC,KAAKsC,YAAYC,KAAKvC,2CAMzBwC,aACKA,GAAKC,UACXC,QAAQR,QAAQ,cACpBnB,cAAcd,KAAK0C,EAAKC,mBAAmBT,EAASK,iDAIxCL,EAASK,SAGd,WAFDA,EAAKK,OAAS,aAGlB7C,KAAK8C,kBAAkBX,EAASK,GAEhCxC,KAAK+C,qBAAqBZ,EAASK,gDAIvBL,EAASK,MACzBQ,GAAMb,EAAQc,8BAELjD,MAAK2B,QAChBJ,OAAO,QACNC,KAAK,OAAQ,SACbA,KAAK,IAAKwB,EAAIE,MACd1B,KAAK,IAAKwB,EAAIG,KACd3B,KAAK,QAASwB,EAAII,OAClB5B,KAAK,eAAgBgB,EAAKK,MAAML,EAAKK,MAAMQ,QAAQ,EAAE,GACrD7B,KAAK,SAAU,SACfA,KAAK,SAAUwB,EAAIM,kDAKLnB,EAASK,MACtBQ,GAAMb,EAAQc,wBACdM,EAAKP,EAAIE,KAAOF,EAAII,MAAQ,EAC5BI,EAAKR,EAAIG,IAAMH,EAAIM,OAAS,CAEnBtD,MAAK2B,QAChBJ,OAAO,UACPC,KAAK,IAAK,GACVA,KAAK,OAAQ,SACbA,KAAK,KAAM+B,GACX/B,KAAK,KAAMgC,GAENC,aAAaC,SAAS,KAAKlC,KAAK,IAAKgB,EAAKK,MAAMc,QAAUX,EAAII,MAAO,8CAQvEtC,OAAOW,MAAM,UAAW,QACtBzB,gCASL4D,EAAW7D,eACRkB,YAAY4C,GAAGD,EAAW7D,GACxBC,iCASJ4D,EAAW7D,eACTkB,YAAY6C,IAAIF,EAAW7D,GACzBC,oCASD+D,SAGC/D,oDASFiB,YAAY+C,UAEVhE,2CFxNIW,kBAKNC,iBAMAA,SAASkB,UAAYzC,EAAesB,EAAQmB,UG3BzB,gBHiCnBlB,SAASmB,YAAc1C,EAAesB,EAAQoB,YG3BzB,UHiCrBnB,SAASyB,MAAQ1B,EAAQ0B,WAMzBpB,YAAc,GAAIzB,YAQlByE,iBAAmB,GAAIvD,GAAgBV,KAAKY,eAE5CsD,8CASHN,EAAW7D,eACRkB,YAAY4C,GAAGD,EAAW7D,GACxBC,iCASJ4D,EAAW7D,eACTkB,YAAY6C,IAAIF,EAAW7D,GACzBC,mDAQFiB,YAAY+C,eACZC,iBAAiBD,eACjBpD,SAAW,KAETZ,oCAQDkB,eACD+C,iBAAiBC,OAAOhD,GACtBlB,oCAQDW,OACDX,KAAKiE,iBAAiBE,kBACpB,4FAGFF,iBAAiBG,OAAOzD,GAEtBX,2CAQFA,MAAKiE,iBAAiBE,mBACrBF,iBAAiBC,cAGlBD,iBAAiBI,QAEfrE,0CASFA,MAAKiE,iBAAiBE,mBACrBF,iBAAiBC,cAGlBD,iBAAiBK,OAEftE"}